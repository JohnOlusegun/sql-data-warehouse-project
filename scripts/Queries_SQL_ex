*/
------------------------------------ SQL: Working with NULLs ------------------------------------

1. Replacing NULL Values
   - ISNULL(expression, replacement): Only 2 arguments
     Example: ISNULL(ship_address, billing_address)
              ISNULL(ship_address, 'N/A')

   - COALESCE(expr1, expr2, ..., exprN): Returns the first non-NULL
     Example: COALESCE(ship_address, billing_address, 'N/A')

   - NULLIF(expr1, expr2): Returns NULL if expressions are equal
     Example: NULLIF(column1, column2)

2. Checking for NULLs
   - IS NULL          → Checks if value is NULL
   - IS NOT NULL      → Checks if value is NOT NULL
     Example: WHERE Score IS NULL
              WHERE LastName IS NOT NULL
/*
-----------------------------------------------------------------------------------------------

-- Use Case 1: Find average scores of the customers and replacing nulls

SELECT  
    CustomerID,
    Score,
    COALESCE(Score, 0) AS Score2,
    AVG(Score) OVER () AS AvgScores,
    AVG(COALESCE(Score, 0)) OVER () AS AvgScores_Nl
FROM Sales.Customers;

-----------------------------------------------------------------------------------------------
-- Use Case 2: Display the full name of the customers in a single field by merging their first and last names, and add 10 bonus points to each customer's Score)

SELECT 
    CustomerID,
    FirstName,
    LastName,
    FirstName + ' ' + COALESCE(LastName, ' ') AS FullName,
    Score,
    COALESCE(Score, 0) + 10 AS ScoreWithBonus
FROM Sales.Customers;

-----------------------------------------------------------------------------------------------
-- Sort the customers from lowest to highest scores with the NULLs at the end
SELECT 
    CustomerID,
    Score
FROM Sales.Customers 
ORDER BY 
    CASE WHEN Score IS NULL THEN 1 ELSE 0 END, 
    Score;

-- NULLIF: Will check two values; if equal, will return NULL
-- Find the sales price for each order by dividing Sales by Quantity
SELECT
    OrdersID,
    Sales,
    Quantity,
    Sales / NULLIF(Quantity, 0) AS Price 
FROM Sales.Orders;

-- IS NULL and IS NOT NULL
-- Identify the customers who have no scores
SELECT 
    *
FROM Sales.Customers
WHERE Score IS NULL;

-- Handling NULL, BLANK Space, Empty String
WITH Orders AS (
    SELECT 1 AS Id, 'A' AS Category UNION
    SELECT 2, NULL UNION
    SELECT 3, '' UNION
    SELECT 4, '  '
)
SELECT
    *,
    TRIM(Category) AS Policy1,
    NULLIF(TRIM(Category), '') AS Policy2,
    COALESCE(NULLIF(TRIM(Category), ''), 'unknown') AS Policy3
FROM Orders;

-- CASE
-- Generate a report showing the total sales for each category (High, Medium, Low)
-- Sort the Category from highest to lowest total sales
SELECT 
    Category,
    SUM(Sales) AS TotalSales
FROM (
    SELECT 
        OrderID,
        Sales,
        CASE
            WHEN Sales > 50 THEN 'High'
            WHEN Sales > 20 THEN 'Medium'
            ELSE 'Low'
        END AS Category 
    FROM Sales.Orders
) AS t
GROUP BY Category 
ORDER BY TotalSales DESC;
